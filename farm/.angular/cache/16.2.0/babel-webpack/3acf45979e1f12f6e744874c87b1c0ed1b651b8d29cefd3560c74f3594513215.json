{"ast":null,"code":"var _class;\nimport * as Highcharts from 'highcharts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"highcharts-angular\";\nexport class LineChartComponent {\n  constructor(http) {\n    this.http = http;\n    this.Highcharts = Highcharts;\n    this.chartOptions = {\n      title: {\n        text: 'Live Data Line Chart'\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      series: [{\n        type: 'line',\n        name: 'Live Data',\n        data: [] // Start with an empty data array\n      }]\n    };\n  }\n\n  ngOnInit() {\n    // Create the chart instance\n    this.chart = Highcharts.chart('chart-container', this.chartOptions);\n    setInterval(() => {\n      // const timestamp = new Date().getTime();\n      // const value = Math.random() * 100;\n      // if (this.chart) {\n      //   this.chart.series[0].addPoint(\n      //     [timestamp, value],\n      //     true,\n      //     this.chart.series[0].data.length >= 10\n      //   );\n      // }\n      this.makeAPICall();\n    }, 1000);\n  }\n  makeAPICall() {\n    const apiUrl = \"http://localhost:8000/liveRecordsSensorData\";\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    this.http.get(apiUrl, {\n      headers\n    }).subscribe(response => {\n      console.log(\"API response\", response);\n      if (this.chart) {\n        const timestamp = new Date(response.minute).getTime();\n        const temperature = response.temperature;\n        const humidity = response.humidity;\n        console.log(timestamp);\n        // Update the chart with temperature and humidity data\n        this.chart.series[0].addPoint([timestamp, temperature], true, this.chart.series[0].data.length >= 10);\n        // You might add another series for humidity if needed\n        // this.chart.series[1].addPoint([timestamp, humidity], true, this.chart.series[1].data.length >= 10);\n      }\n    }, error => {\n      console.log(\"API error\", error);\n    });\n  }\n}\n_class = LineChartComponent;\n_class.ɵfac = function LineChartComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-line-chart\"]],\n  decls: 2,\n  vars: 2,\n  consts: [[\"id\", \"chart-container\"], [2, \"width\", \"100%\", \"height\", \"400px\", \"display\", \"block\", 3, \"Highcharts\", \"options\"]],\n  template: function LineChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"highcharts-chart\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"Highcharts\", ctx.Highcharts)(\"options\", ctx.chartOptions);\n    }\n  },\n  dependencies: [i2.HighchartsChartComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Highcharts","LineChartComponent","constructor","http","chartOptions","title","text","xAxis","type","series","name","data","ngOnInit","chart","setInterval","makeAPICall","apiUrl","headers","get","subscribe","response","console","log","timestamp","Date","minute","getTime","temperature","humidity","addPoint","length","error","i0","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","LineChartComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty"],"sources":["/home/diot/frontend/farm/src/app/line-chart/line-chart.component.ts","/home/diot/frontend/farm/src/app/line-chart/line-chart.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as Highcharts from 'highcharts';\nimport { Options } from 'highcharts';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-line-chart',\n  templateUrl: './line-chart.component.html',\n  styleUrls: ['./line-chart.component.css'],\n})\nexport class LineChartComponent implements OnInit {\n  Highcharts: typeof Highcharts = Highcharts;\n  chartOptions: Highcharts.Options = {\n    title: {\n      text: 'Live Data Line Chart',\n    },\n    xAxis: {\n      type: 'datetime',\n    },\n    series: [\n      {\n        type: 'line',\n        name: 'Live Data',\n        data: [], // Start with an empty data array\n      },\n    ],\n  };\n  chart: Highcharts.Chart | undefined; // Declare chart reference\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    // Create the chart instance\n    this.chart = Highcharts.chart('chart-container', this.chartOptions);\n\n    setInterval(() => {\n      // const timestamp = new Date().getTime();\n      // const value = Math.random() * 100;\n\n      // if (this.chart) {\n      //   this.chart.series[0].addPoint(\n      //     [timestamp, value],\n      //     true,\n      //     this.chart.series[0].data.length >= 10\n      //   );\n      // }\n\n\n     this.makeAPICall();\n      \n\n\n    }, 1000);\n  }\n\n  makeAPICall():void{\n    const apiUrl = \"http://localhost:8000/liveRecordsSensorData\";\n    const headers = {\n      \"Content-Type\":\"application/json\"\n    };\n    this.http.get(apiUrl, { headers }).subscribe(\n      (response: any) => {\n        console.log(\"API response\", response);\n  \n        if (this.chart) {\n          const timestamp = new Date(response.minute).getTime();\n          const temperature = response.temperature;\n          const humidity = response.humidity;\n          \n          console.log(timestamp);\n          // Update the chart with temperature and humidity data\n          this.chart.series[0].addPoint([timestamp, temperature], true, this.chart.series[0].data.length >= 10);\n          // You might add another series for humidity if needed\n          // this.chart.series[1].addPoint([timestamp, humidity], true, this.chart.series[1].data.length >= 10);\n\n\n        }\n      },\n      (error) => {\n        console.log(\"API error\", error);\n      }\n    )\n  }\n}\n","<div id=\"chart-container\">\n    <highcharts-chart\n      [Highcharts]=\"Highcharts\"\n      [options]=\"chartOptions\"\n      style=\"width: 100%; height: 400px; display: block;\" >\n    </highcharts-chart>\n  </div>\n  "],"mappings":";AACA,OAAO,KAAKA,UAAU,MAAM,YAAY;;;;AASxC,OAAM,MAAOC,kBAAkB;EAmB7BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAlBxB,KAAAH,UAAU,GAAsBA,UAAU;IAC1C,KAAAI,YAAY,GAAuB;MACjCC,KAAK,EAAE;QACLC,IAAI,EAAE;OACP;MACDC,KAAK,EAAE;QACLC,IAAI,EAAE;OACP;MACDC,MAAM,EAAE,CACN;QACED,IAAI,EAAE,MAAM;QACZE,IAAI,EAAE,WAAW;QACjBC,IAAI,EAAE,EAAE,CAAE;OACX;KAEJ;EAGsC;;EAEvCC,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,KAAK,GAAGb,UAAU,CAACa,KAAK,CAAC,iBAAiB,EAAE,IAAI,CAACT,YAAY,CAAC;IAEnEU,WAAW,CAAC,MAAK;MACf;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MAGD,IAAI,CAACC,WAAW,EAAE;IAInB,CAAC,EAAE,IAAI,CAAC;EACV;EAEAA,WAAWA,CAAA;IACT,MAAMC,MAAM,GAAG,6CAA6C;IAC5D,MAAMC,OAAO,GAAG;MACd,cAAc,EAAC;KAChB;IACD,IAAI,CAACd,IAAI,CAACe,GAAG,CAACF,MAAM,EAAE;MAAEC;IAAO,CAAE,CAAC,CAACE,SAAS,CACzCC,QAAa,IAAI;MAChBC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,QAAQ,CAAC;MAErC,IAAI,IAAI,CAACP,KAAK,EAAE;QACd,MAAMU,SAAS,GAAG,IAAIC,IAAI,CAACJ,QAAQ,CAACK,MAAM,CAAC,CAACC,OAAO,EAAE;QACrD,MAAMC,WAAW,GAAGP,QAAQ,CAACO,WAAW;QACxC,MAAMC,QAAQ,GAAGR,QAAQ,CAACQ,QAAQ;QAElCP,OAAO,CAACC,GAAG,CAACC,SAAS,CAAC;QACtB;QACA,IAAI,CAACV,KAAK,CAACJ,MAAM,CAAC,CAAC,CAAC,CAACoB,QAAQ,CAAC,CAACN,SAAS,EAAEI,WAAW,CAAC,EAAE,IAAI,EAAE,IAAI,CAACd,KAAK,CAACJ,MAAM,CAAC,CAAC,CAAC,CAACE,IAAI,CAACmB,MAAM,IAAI,EAAE,CAAC;QACrG;QACA;;IAIJ,CAAC,EACAC,KAAK,IAAI;MACRV,OAAO,CAACC,GAAG,CAAC,WAAW,EAAES,KAAK,CAAC;IACjC,CAAC,CACF;EACH;;SAxEW9B,kBAAkB;;mBAAlBA,MAAkB,EAAA+B,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;QAAlBlC,MAAkB;EAAAmC,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCV/BV,EAAA,CAAAY,cAAA,aAA0B;MACtBZ,EAAA,CAAAa,SAAA,0BAImB;MACrBb,EAAA,CAAAc,YAAA,EAAM;;;MAJFd,EAAA,CAAAe,SAAA,GAAyB;MAAzBf,EAAA,CAAAgB,UAAA,eAAAL,GAAA,CAAA3C,UAAA,CAAyB,YAAA2C,GAAA,CAAAvC,YAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}