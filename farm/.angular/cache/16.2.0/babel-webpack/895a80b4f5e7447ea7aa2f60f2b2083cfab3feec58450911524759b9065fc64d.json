{"ast":null,"code":"var _class;\nimport * as Highcharts from 'highcharts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"highcharts-angular\";\nfunction LineChartComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2, \"Average Values\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"Last 1 Day Temperature: \", ctx_r0.averageData.last_1_day.temperature, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Last 1 Day Humidity: \", ctx_r0.averageData.last_1_day.humidity, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Last 1 Week Temperature: \", ctx_r0.averageData.last_1_week.temperature, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Last 1 Week Humidity: \", ctx_r0.averageData.last_1_week.humidity, \"\");\n  }\n}\nfunction LineChartComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2, \"Latest Values\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"p\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"p\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"Temperature: \", ctx_r1.latestData.temperature, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Humidity: \", ctx_r1.latestData.humidity, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Moisture: \", ctx_r1.latestData.moisture, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Lux: \", ctx_r1.latestData.lux, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"PH: \", ctx_r1.latestData.pH, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Timestamp: \", ctx_r1.latestData.timestamp, \"\");\n  }\n}\nexport class LineChartComponent {\n  // ----------------------------------------------------------------------------\n  // -----------------------------------------------------------------------------\n  constructor(http) {\n    this.http = http;\n    //-----------------------------------------------------------\n    //declare temperature chart\n    //-----------------------------------------------------------\n    this.Highcharts = Highcharts;\n    this.chartOptions = {\n      title: {\n        text: 'Live Data Line Chart'\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      series: [{\n        type: 'line',\n        name: 'Live Data',\n        data: [] // Start with an empty data array\n      }]\n    };\n    //-----------------------------------------------------------\n    //declare humidity chart\n    //-----------------------------------------------------------\n    this.Highcharts_humidity = Highcharts;\n    this.chartOptions_humidity = {\n      title: {\n        text: 'Live Data Line Chart'\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      series: [{\n        type: 'line',\n        name: 'Live Data',\n        data: [] // Start with an empty data array\n      }]\n    };\n    //-----------------------------------------------------------\n    //declare moisture chart\n    //-----------------------------------------------------------\n    this.Highcharts_moisture = Highcharts;\n    this.chartOptions_moisture = {\n      title: {\n        text: 'Live Data Line Chart'\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      series: [{\n        type: 'line',\n        name: 'Live Data',\n        data: [] // Start with an empty data array\n      }]\n    };\n    //-----------------------------------------------------------\n    //declare lux chart\n    //-----------------------------------------------------------\n    this.Highcharts_lux = Highcharts;\n    this.chartOptions_lux = {\n      title: {\n        text: 'Live Data Line Chart'\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      series: [{\n        type: 'line',\n        name: 'Live Data',\n        data: [] // Start with an empty data array\n      }]\n    };\n    // ----------------------------------------------------------------------------\n    //-----------------------------------------------------------\n    //declare pH chart\n    //-----------------------------------------------------------\n    this.Highcharts_pH = Highcharts;\n    this.chartOptions_pH = {\n      title: {\n        text: 'Live Data Line Chart'\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      series: [{\n        type: 'line',\n        name: 'Live Data',\n        data: [] // Start with an empty data array\n      }]\n    };\n  }\n\n  ngOnInit() {\n    //average of last day\n    //average of last week\n    this.averageValues();\n    // Create the chart instance\n    this.chart = Highcharts.chart('chart-container', this.chartOptions); // temperature\n    this.chart_humidity = Highcharts.chart('chart-container-humidity', this.chartOptions_humidity);\n    this.chart_moisture = Highcharts.chart('chart-container-moisture', this.chartOptions_moisture);\n    this.chart_lux = Highcharts.chart('chart-container-lux', this.chartOptions_lux);\n    this.chart_pH = Highcharts.chart('chart-container-pH', this.chartOptions_pH);\n    this.liveRecordsSensorsAPICall(); //to call api first time and get historical values\n    setInterval(() => {\n      this.averageValues();\n      this.liveRecordsSensorsAPICall(); //call after every 20 second  \n    }, 20000); // 60000 milliseconds = 1 minute\n  }\n  //get average values from python api for average values\n  averageValues() {\n    const apiUrl = \"http://localhost:8000/latestSensorData\";\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    this.http.get(apiUrl, {\n      headers\n    }).subscribe(response => {\n      console.log(\"API response\", response);\n      this.averageData = response.average;\n      this.latestData = response.latest;\n    });\n  }\n  //get live values from python api for live records\n  liveRecordsSensorsAPICall() {\n    const apiUrl = \"http://localhost:8000/liveRecordsSensorData\";\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    this.http.get(apiUrl, {\n      headers\n    }).subscribe(response => {\n      console.log(\"API response\", response);\n      console.log(response.liveRecords[0]);\n      const liveRecords = response.liveRecords;\n      const chart = this.chart; // Store this.chart in a local variable\n      if (chart) {\n        liveRecords.forEach(record => {\n          const timestamp = new Date(record.minute).getTime();\n          const temperature = record.temperature;\n          console.log(temperature);\n          console.log(timestamp);\n          // Add temperature data to the chart's first series\n          if (chart.series[0]) {\n            chart.series[0].addPoint([timestamp, temperature]);\n          } else {\n            console.log(\"no series for temperature\");\n          }\n        });\n      } else {\n        console.log(\"no temperature chart\");\n      }\n      //---------------------------------------------------------------------------\n      //Humidity chart\n      //---------------------------------------------------------------------------\n      const chart_humidity = this.chart_humidity; // Store this.chart in a local variable\n      if (chart_humidity) {\n        liveRecords.forEach(record => {\n          const timestamp = new Date(record.minute).getTime();\n          const humidity = record.humidity;\n          console.log(timestamp);\n          // Add temperature data to the chart's first series\n          if (chart_humidity.series[0]) {\n            chart_humidity.series[0].addPoint([timestamp, humidity]);\n          } else {\n            console.log(\"no series for humidity\");\n          }\n        });\n      } else {\n        console.log(\"no humidity chart\");\n      }\n      //---------------------------------------------------------------------------\n      //moisture chart\n      //---------------------------------------------------------------------------\n      const chart_moisture = this.chart_moisture; // Store this.chart in a local variable\n      if (chart_moisture) {\n        liveRecords.forEach(record => {\n          const timestamp = new Date(record.minute).getTime();\n          const moisture = record.moisture;\n          console.log(timestamp);\n          // Add temperature data to the chart's first series\n          if (chart_moisture.series[0]) {\n            chart_moisture.series[0].addPoint([timestamp, moisture]);\n          } else {\n            console.log(\"no series for moisture\");\n          }\n        });\n      } else {\n        console.log(\"no moisture chart\");\n      }\n      //---------------------------------------------------------------------------\n      //lux chart\n      //---------------------------------------------------------------------------\n      const chart_lux = this.chart_lux; // Store this.chart in a local variable\n      if (chart_lux) {\n        liveRecords.forEach(record => {\n          const timestamp = new Date(record.minute).getTime();\n          const lux = record.lux;\n          console.log(timestamp);\n          // Add temperature data to the chart's first series\n          if (chart_lux.series[0]) {\n            chart_lux.series[0].addPoint([timestamp, lux]);\n          } else {\n            console.log(\"no series for moisture\");\n          }\n        });\n      } else {\n        console.log(\"no moisture chart\");\n      }\n      //---------------------------------------------------------------------------\n      //pH chart\n      //---------------------------------------------------------------------------\n      const chart_pH = this.chart_pH; // Store this.chart in a local variable\n      if (chart_pH) {\n        liveRecords.forEach(record => {\n          const timestamp = new Date(record.minute).getTime();\n          const pH = record.pH;\n          console.log(timestamp);\n          // Add temperature data to the chart's first series\n          if (chart_pH.series[0]) {\n            chart_pH.series[0].addPoint([timestamp, pH]);\n          } else {\n            console.log(\"no series for moisture\");\n          }\n        });\n      } else {\n        console.log(\"no moisture chart\");\n      }\n      //-------------------------------------------------------------------------------------------------------- \n      /// display current value in one div\n    }, error => {\n      console.log(\"API error\", error);\n    });\n  }\n}\n_class = LineChartComponent;\n_class.ɵfac = function LineChartComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-line-chart\"]],\n  decls: 15,\n  vars: 12,\n  consts: [[\"id\", \"data-for-text\"], [4, \"ngIf\"], [\"id\", \"data-for-chart\"], [\"id\", \"chart-container\"], [2, \"width\", \"100%\", \"height\", \"400px\", \"display\", \"block\", 3, \"Highcharts\", \"options\"], [\"id\", \"chart-container-humidity\"], [\"id\", \"chart-container-moisture\"], [\"id\", \"chart-container-lux\"], [\"id\", \"chart-container-pH\"]],\n  template: function LineChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0);\n      i0.ɵɵtemplate(2, LineChartComponent_div_2_Template, 11, 4, \"div\", 1);\n      i0.ɵɵtemplate(3, LineChartComponent_div_3_Template, 15, 6, \"div\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 3);\n      i0.ɵɵelement(6, \"highcharts-chart\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 5);\n      i0.ɵɵelement(8, \"highcharts-chart\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 6);\n      i0.ɵɵelement(10, \"highcharts-chart\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 7);\n      i0.ɵɵelement(12, \"highcharts-chart\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 8);\n      i0.ɵɵelement(14, \"highcharts-chart\", 4);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.averageData);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.latestData);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"Highcharts\", ctx.Highcharts)(\"options\", ctx.chartOptions);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"Highcharts\", ctx.Highcharts_humidity)(\"options\", ctx.chartOptions_humidity);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"Highcharts\", ctx.Highcharts_moisture)(\"options\", ctx.chartOptions_moisture);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"Highcharts\", ctx.Highcharts_lux)(\"options\", ctx.chartOptions_lux);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"Highcharts\", ctx.Highcharts_pH)(\"options\", ctx.chartOptions_pH);\n    }\n  },\n  dependencies: [i2.NgIf, i3.HighchartsChartComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Highcharts","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","averageData","last_1_day","temperature","humidity","last_1_week","ctx_r1","latestData","moisture","lux","pH","timestamp","LineChartComponent","constructor","http","chartOptions","title","text","xAxis","type","series","name","data","Highcharts_humidity","chartOptions_humidity","Highcharts_moisture","chartOptions_moisture","Highcharts_lux","chartOptions_lux","Highcharts_pH","chartOptions_pH","ngOnInit","averageValues","chart","chart_humidity","chart_moisture","chart_lux","chart_pH","liveRecordsSensorsAPICall","setInterval","apiUrl","headers","get","subscribe","response","console","log","average","latest","liveRecords","forEach","record","Date","minute","getTime","addPoint","error","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","LineChartComponent_Template","rf","ctx","ɵɵtemplate","LineChartComponent_div_2_Template","LineChartComponent_div_3_Template","ɵɵelement","ɵɵproperty"],"sources":["/home/diot/frontend/farm/src/app/line-chart/line-chart.component.ts","/home/diot/frontend/farm/src/app/line-chart/line-chart.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as Highcharts from 'highcharts';\nimport { Options } from 'highcharts';\nimport { HttpClient } from '@angular/common/http';\n\n\n// Define an interface for a single record\ninterface SensorRecord {\n  temperature: number;\n  humidity: number;\n  moisture: number;\n  lux: number;\n  pH: number;\n  minute: string;\n}\n\n@Component({\n  selector: 'app-line-chart',\n  templateUrl: './line-chart.component.html',\n  styleUrls: ['./line-chart.component.css'],\n})\nexport class LineChartComponent implements OnInit {\n\n  averageData: any; // Store average data here\n  latestData: any;  // Store latest data here\n\n  //-----------------------------------------------------------\n  //declare temperature chart\n  //-----------------------------------------------------------\n  Highcharts: typeof Highcharts = Highcharts;\n  chartOptions: Highcharts.Options = {\n    title: {\n      text: 'Live Data Line Chart',\n    },\n    xAxis: {\n      type: 'datetime',\n    },\n    series: [\n      {\n        type: 'line',\n        name: 'Live Data',\n        data: [], // Start with an empty data array\n      },\n    ],\n  };\n  chart: Highcharts.Chart | undefined; // Declare chart reference\n\n  //-----------------------------------------------------------\n  //declare humidity chart\n  //-----------------------------------------------------------\n  Highcharts_humidity: typeof Highcharts = Highcharts;\n  chartOptions_humidity: Highcharts.Options = {\n    title: {\n      text: 'Live Data Line Chart',\n    },\n    xAxis: {\n      type: 'datetime',\n    },\n    series: [\n      {\n        type: 'line',\n        name: 'Live Data',\n        data: [], // Start with an empty data array\n      },\n    ],\n  };\n  chart_humidity: Highcharts.Chart | undefined; // Declare chart reference\n\n //-----------------------------------------------------------\n  //declare moisture chart\n//-----------------------------------------------------------\n  Highcharts_moisture: typeof Highcharts = Highcharts;\n  chartOptions_moisture: Highcharts.Options = {\n    title: {\n      text: 'Live Data Line Chart',\n    },\n    xAxis: {\n      type: 'datetime',\n    },\n    series: [\n      {\n        type: 'line',\n        name: 'Live Data',\n        data: [], // Start with an empty data array\n      },\n    ],\n  };\n  chart_moisture: Highcharts.Chart | undefined; // Declare chart reference\n\n\n  //-----------------------------------------------------------\n  //declare lux chart\n  //-----------------------------------------------------------\n  Highcharts_lux: typeof Highcharts = Highcharts;\n  chartOptions_lux: Highcharts.Options = {\n    title: {\n      text: 'Live Data Line Chart',\n    },\n    xAxis: {\n      type: 'datetime',\n    },\n    series: [\n      {\n        type: 'line',\n        name: 'Live Data',\n        data: [], // Start with an empty data array\n      },\n    ],\n  };\n  chart_lux: Highcharts.Chart | undefined; // Declare chart reference\n\n// ----------------------------------------------------------------------------\n //-----------------------------------------------------------\n  //declare pH chart\n  //-----------------------------------------------------------\n  Highcharts_pH: typeof Highcharts = Highcharts;\n  chartOptions_pH: Highcharts.Options = {\n    title: {\n      text: 'Live Data Line Chart',\n    },\n    xAxis: {\n      type: 'datetime',\n    },\n    series: [\n      {\n        type: 'line',\n        name: 'Live Data',\n        data: [], // Start with an empty data array\n      },\n    ],\n  };\n  chart_pH: Highcharts.Chart | undefined; // Declare chart reference\n\n// ----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    \n    //average of last day\n    //average of last week\n    this.averageValues();\n\n    // Create the chart instance\n    this.chart = Highcharts.chart('chart-container', this.chartOptions);  // temperature\n    this.chart_humidity = Highcharts.chart('chart-container-humidity', this.chartOptions_humidity);\n    this.chart_moisture = Highcharts.chart('chart-container-moisture', this.chartOptions_moisture);   \n    this.chart_lux = Highcharts.chart('chart-container-lux', this.chartOptions_lux);\n    this.chart_pH = Highcharts.chart('chart-container-pH', this.chartOptions_pH);\n\n    this.liveRecordsSensorsAPICall(); //to call api first time and get historical values\n\n    setInterval(() => {\n\n     this.averageValues();\n     this.liveRecordsSensorsAPICall();  //call after every 20 second  \n    }, 20000); // 60000 milliseconds = 1 minute\n  }\n\n\n  //get average values from python api for average values\n  averageValues(): void{\n    const apiUrl = \"http://localhost:8000/latestSensorData\";\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    this.http.get(apiUrl, { headers }).subscribe(\n      (response: any) => {\n        console.log(\"API response\", response);\n\n        this.averageData = response.average;\n        this.latestData = response.latest;\n\n\n\n\n      });\n  };\n\n  //get live values from python api for live records\n  liveRecordsSensorsAPICall(): void {\n    const apiUrl = \"http://localhost:8000/liveRecordsSensorData\";\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n  \n    this.http.get(apiUrl, { headers }).subscribe(\n      (response: any) => {\n        console.log(\"API response\", response);\n  \n        console.log(response.liveRecords[0]);\n  \n        const liveRecords: SensorRecord[] = response.liveRecords;\n  \n        const chart = this.chart; // Store this.chart in a local variable\n  \n        if (chart) {\n\n          liveRecords.forEach(record => {\n            const timestamp = new Date(record.minute).getTime();\n            \n            const temperature = record.temperature;\n            \n            \n            console.log(temperature);\n            console.log(timestamp);\n\n\n            // Add temperature data to the chart's first series\n            if (chart.series[0]) {\n              chart.series[0].addPoint([timestamp, temperature]);\n            }\n            else{\n              console.log(\"no series for temperature\");\n            }\n  \n\n          });\n        }\n        else{\n          console.log(\"no temperature chart\");\n        }\n\n        //---------------------------------------------------------------------------\n        //Humidity chart\n        //---------------------------------------------------------------------------\n        const chart_humidity = this.chart_humidity; // Store this.chart in a local variable\n        if (chart_humidity) {\n\n          liveRecords.forEach(record => {\n            const timestamp = new Date(record.minute).getTime();\n            \n            \n            const humidity = record.humidity;\n            \n            console.log(timestamp);\n\n\n            // Add temperature data to the chart's first series\n            if (chart_humidity.series[0]) {\n              chart_humidity.series[0].addPoint([timestamp, humidity]);\n            }\n            else{\n              console.log(\"no series for humidity\");\n            }\n  \n\n          });\n        }\n        else{\n          console.log(\"no humidity chart\");\n        }\n        //---------------------------------------------------------------------------\n        //moisture chart\n        //---------------------------------------------------------------------------\n        const chart_moisture = this.chart_moisture; // Store this.chart in a local variable\n        if (chart_moisture) {\n\n          liveRecords.forEach(record => {\n            const timestamp = new Date(record.minute).getTime();\n            \n            \n            const moisture = record.moisture;\n            \n            console.log(timestamp);\n\n\n            // Add temperature data to the chart's first series\n            if (chart_moisture.series[0]) {\n              chart_moisture.series[0].addPoint([timestamp, moisture]);\n            }\n            else{\n              console.log(\"no series for moisture\");\n            }\n  \n\n          });\n        }\n        else{\n          console.log(\"no moisture chart\");\n        }\n          //---------------------------------------------------------------------------\n        //lux chart\n        //---------------------------------------------------------------------------\n        const chart_lux= this.chart_lux; // Store this.chart in a local variable\n        if (chart_lux) {\n\n          liveRecords.forEach(record => {\n            const timestamp = new Date(record.minute).getTime();\n            \n            \n            const lux = record.lux;\n            \n            console.log(timestamp);\n\n\n            // Add temperature data to the chart's first series\n            if (chart_lux.series[0]) {\n              chart_lux.series[0].addPoint([timestamp, lux]);\n            }\n            else{\n              console.log(\"no series for moisture\");\n            }\n  \n\n          });\n        }\n        else{\n          console.log(\"no moisture chart\");\n        }\n        //---------------------------------------------------------------------------\n        //pH chart\n        //---------------------------------------------------------------------------\n        const chart_pH = this.chart_pH; // Store this.chart in a local variable\n        if (chart_pH) {\n\n          liveRecords.forEach(record => {\n            const timestamp = new Date(record.minute).getTime();\n            \n            \n            const pH = record.pH;\n            \n            console.log(timestamp);\n\n\n            // Add temperature data to the chart's first series\n            if (chart_pH.series[0]) {\n              chart_pH.series[0].addPoint([timestamp, pH]);\n            }\n            else{\n              console.log(\"no series for moisture\");\n            }\n  \n\n          });\n        }\n        else{\n          console.log(\"no moisture chart\");\n        }\n//-------------------------------------------------------------------------------------------------------- \n        /// display current value in one div\n\n      },\n      (error) => {\n        console.log(\"API error\", error);\n      }\n    );\n\n\n  }\n  \n  \n}\n","<div>\n  <!-- text -->\n  <div id=\"data-for-text\">\n    <div *ngIf=\"averageData\">\n      <h2>Average Values</h2>\n      <p>Last 1 Day Temperature: {{ averageData.last_1_day.temperature }}</p>\n      <p>Last 1 Day Humidity: {{ averageData.last_1_day.humidity }}</p>\n      <p>Last 1 Week Temperature: {{ averageData.last_1_week.temperature }}</p>\n      <p>Last 1 Week Humidity: {{ averageData.last_1_week.humidity }}</p>\n    </div>  \n    <div *ngIf=\"latestData\">\n      <h2>Latest Values</h2>\n      <p>Temperature: {{ latestData.temperature }}</p>\n      <p>Humidity: {{ latestData.humidity }}</p>\n      <p>Moisture: {{ latestData.moisture }}</p>\n      <p>Lux: {{ latestData.lux}}</p>\n      <p>PH: {{ latestData.pH }}</p>\n      <p>Timestamp: {{ latestData.timestamp }}</p>\n    </div>\n  </div>\n<!-- chart -->\n  <div id=\"data-for-chart\">\n    <div id=\"chart-container\">\n      <highcharts-chart [Highcharts]=\"Highcharts\" [options]=\"chartOptions\"\n        style=\"width: 100%; height: 400px; display: block;\">\n      </highcharts-chart>\n    </div>\n    <div id=\"chart-container-humidity\">\n      <highcharts-chart [Highcharts]=\"Highcharts_humidity\" [options]=\"chartOptions_humidity\"\n        style=\"width: 100%; height: 400px; display: block;\">\n      </highcharts-chart>\n    </div>\n    <div id=\"chart-container-moisture\">\n      <highcharts-chart [Highcharts]=\"Highcharts_moisture\" [options]=\"chartOptions_moisture\"\n        style=\"width: 100%; height: 400px; display: block;\">\n      </highcharts-chart>\n    </div>\n    <div id=\"chart-container-lux\">\n      <highcharts-chart [Highcharts]=\"Highcharts_lux\" [options]=\"chartOptions_lux\"\n        style=\"width: 100%; height: 400px; display: block;\">\n      </highcharts-chart>\n    </div>\n    <div id=\"chart-container-pH\">\n      <highcharts-chart [Highcharts]=\"Highcharts_pH\" [options]=\"chartOptions_pH\"\n        style=\"width: 100%; height: 400px; display: block;\">\n      </highcharts-chart>\n    </div>\n\n  </div>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}