{"ast":null,"code":"var _class;\nimport * as Highcharts from 'highcharts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"highcharts-angular\";\nexport class LineChartComponent {\n  constructor(http) {\n    this.http = http;\n    this.Highcharts = Highcharts;\n    this.chartOptions = {\n      title: {\n        text: 'Live Data Line Chart'\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      series: [{\n        type: 'line',\n        name: 'Live Data',\n        data: [] // Start with an empty data array\n      }]\n    };\n\n    this.Highcharts_humidity = Highcharts;\n    this.chartOptions_humidity = {\n      title: {\n        text: 'Live Data Line Chart'\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      series: [{\n        type: 'line',\n        name: 'Live Data',\n        data: [] // Start with an empty data array\n      }]\n    };\n  }\n\n  ngOnInit() {\n    // Create the chart instance\n    this.chart = Highcharts.chart('chart-container', this.chartOptions);\n    this.chart_humidity = Highcharts.chart('chart-container-humidity', this.chartOptions_humidity);\n    this.makeAPICall(); //to call api first time and get historical values\n    setInterval(() => {\n      this.makeAPICall(); //call after every 20 second \n    }, 20000); // 60000 milliseconds = 1 minute\n  }\n\n  makeAPICall() {\n    const apiUrl = \"http://localhost:8000/liveRecordsSensorData\";\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    this.http.get(apiUrl, {\n      headers\n    }).subscribe(response => {\n      console.log(\"API response\", response);\n      console.log(response.liveRecords[0]);\n      const liveRecords = response.liveRecords;\n      const chart = this.chart; // Store this.chart in a local variable\n      if (chart) {\n        liveRecords.forEach(record => {\n          const timestamp = new Date(record.minute).getTime();\n          const temperature = record.temperature;\n          console.log(temperature);\n          console.log(timestamp);\n          // Add temperature data to the chart's first series\n          if (chart.series[0]) {\n            chart.series[0].addPoint([timestamp, temperature]);\n          } else {\n            console.log(\"no series for temperature\");\n          }\n        });\n      } else {\n        console.log(\"no temperature chart\");\n      }\n      //---------------------------------------------------------------------------\n      //Humidity chart\n      //---------------------------------------------------------------------------\n      const chart_humidity = this.chart_humidity; // Store this.chart in a local variable\n      if (chart_humidity) {\n        liveRecords.forEach(record => {\n          const timestamp = new Date(record.minute).getTime();\n          const humidity = record.humidity;\n          console.log(timestamp);\n          // Add temperature data to the chart's first series\n          if (chart_humidity.series[0]) {\n            chart_humidity.series[0].addPoint([timestamp, humidity]);\n          } else {\n            console.log(\"no series for humidity\");\n          }\n        });\n      } else {\n        console.log(\"no temperature chart\");\n      }\n    }, error => {\n      console.log(\"API error\", error);\n    });\n  }\n}\n_class = LineChartComponent;\n_class.ɵfac = function LineChartComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-line-chart\"]],\n  decls: 4,\n  vars: 4,\n  consts: [[\"id\", \"chart-container\"], [2, \"width\", \"100%\", \"height\", \"400px\", \"display\", \"block\", 3, \"Highcharts\", \"options\"], [\"id\", \"chart-container-humidity\"]],\n  template: function LineChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"highcharts-chart\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelement(3, \"highcharts-chart\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"Highcharts\", ctx.Highcharts)(\"options\", ctx.chartOptions);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"Highcharts\", ctx.Highcharts_humidity)(\"options\", ctx.chartOptions_humidity);\n    }\n  },\n  dependencies: [i2.HighchartsChartComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Highcharts","LineChartComponent","constructor","http","chartOptions","title","text","xAxis","type","series","name","data","Highcharts_humidity","chartOptions_humidity","ngOnInit","chart","chart_humidity","makeAPICall","setInterval","apiUrl","headers","get","subscribe","response","console","log","liveRecords","forEach","record","timestamp","Date","minute","getTime","temperature","addPoint","humidity","error","i0","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","LineChartComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty"],"sources":["/home/diot/frontend/farm/src/app/line-chart/line-chart.component.ts","/home/diot/frontend/farm/src/app/line-chart/line-chart.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as Highcharts from 'highcharts';\nimport { Options } from 'highcharts';\nimport { HttpClient } from '@angular/common/http';\n\n\n// Define an interface for a single record\ninterface SensorRecord {\n  temperature: number;\n  humidity: number;\n  minute: string;\n}\n\n@Component({\n  selector: 'app-line-chart',\n  templateUrl: './line-chart.component.html',\n  styleUrls: ['./line-chart.component.css'],\n})\nexport class LineChartComponent implements OnInit {\n  Highcharts: typeof Highcharts = Highcharts;\n  chartOptions: Highcharts.Options = {\n    title: {\n      text: 'Live Data Line Chart',\n    },\n    xAxis: {\n      type: 'datetime',\n    },\n    series: [\n      {\n        type: 'line',\n        name: 'Live Data',\n        data: [], // Start with an empty data array\n      },\n    ],\n  };\n  chart: Highcharts.Chart | undefined; // Declare chart reference\n\n  \n  Highcharts_humidity: typeof Highcharts = Highcharts;\n  chartOptions_humidity: Highcharts.Options = {\n    title: {\n      text: 'Live Data Line Chart',\n    },\n    xAxis: {\n      type: 'datetime',\n    },\n    series: [\n      {\n        type: 'line',\n        name: 'Live Data',\n        data: [], // Start with an empty data array\n      },\n    ],\n  };\n  chart_humidity: Highcharts.Chart | undefined; // Declare chart reference\n\n\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    // Create the chart instance\n    this.chart = Highcharts.chart('chart-container', this.chartOptions);\n\n\n    this.chart_humidity = Highcharts.chart('chart-container-humidity', this.chartOptions_humidity);\n\n    this.makeAPICall(); //to call api first time and get historical values\n\n    setInterval(() => {\n\n     this.makeAPICall();  //call after every 20 second \n      \n\n\n    }, 20000); // 60000 milliseconds = 1 minute\n  }\n\n  makeAPICall(): void {\n    const apiUrl = \"http://localhost:8000/liveRecordsSensorData\";\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n  \n    this.http.get(apiUrl, { headers }).subscribe(\n      (response: any) => {\n        console.log(\"API response\", response);\n  \n        console.log(response.liveRecords[0]);\n  \n        const liveRecords: SensorRecord[] = response.liveRecords;\n  \n        const chart = this.chart; // Store this.chart in a local variable\n  \n        if (chart) {\n\n          liveRecords.forEach(record => {\n            const timestamp = new Date(record.minute).getTime();\n            \n            const temperature = record.temperature;\n            \n            \n            console.log(temperature);\n            console.log(timestamp);\n\n\n            // Add temperature data to the chart's first series\n            if (chart.series[0]) {\n              chart.series[0].addPoint([timestamp, temperature]);\n            }\n            else{\n              console.log(\"no series for temperature\");\n            }\n  \n\n          });\n        }\n        else{\n          console.log(\"no temperature chart\");\n        }\n\n        //---------------------------------------------------------------------------\n        //Humidity chart\n        //---------------------------------------------------------------------------\n        const chart_humidity = this.chart_humidity; // Store this.chart in a local variable\n        if (chart_humidity) {\n\n          liveRecords.forEach(record => {\n            const timestamp = new Date(record.minute).getTime();\n            \n            \n            const humidity = record.humidity;\n            \n            console.log(timestamp);\n\n\n            // Add temperature data to the chart's first series\n            if (chart_humidity.series[0]) {\n              chart_humidity.series[0].addPoint([timestamp, humidity]);\n            }\n            else{\n              console.log(\"no series for humidity\");\n            }\n  \n\n          });\n        }\n        else{\n          console.log(\"no temperature chart\");\n        }\n\n\n\n      },\n      (error) => {\n        console.log(\"API error\", error);\n      }\n    );\n  }\n  \n  \n}\n","<div id=\"chart-container\">\n    <highcharts-chart\n      [Highcharts]=\"Highcharts\"\n      [options]=\"chartOptions\"\n      style=\"width: 100%; height: 400px; display: block;\" >\n    </highcharts-chart>\n  </div>\n\n\n\n  <div id=\"chart-container-humidity\">\n    <highcharts-chart\n      [Highcharts]=\"Highcharts_humidity\"\n      [options]=\"chartOptions_humidity\"\n      style=\"width: 100%; height: 400px; display: block;\" >\n    </highcharts-chart>\n  </div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}